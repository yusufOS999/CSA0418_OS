#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 100

int memory[MAX_BLOCKS];

void reset_memory() {
    for (int i = 0; i < MAX_BLOCKS; i++)
        memory[i] = 0;
}

void contiguous_allocation() {
    int start, length, i, flag = 0;
    printf("\n[Contiguous] Enter starting block and length of the file: ");
    scanf("%d%d", &start, &length);
    if (start + length > MAX_BLOCKS) {
        printf("[Contiguous] Out of bounds.\n");
        return;
    }
    for (i = start; i < start + length; i++) {
        if (memory[i] == 1) {
            flag = 1;
            break;
        }
    }
    if (flag == 0) {
        for (i = start; i < start + length; i++)
            memory[i] = 1;
        printf("[Contiguous] File allocated from block %d to %d\n", start, start + length - 1);
    } else {
        printf("[Contiguous] Allocation failed. Block %d already allocated.\n", i);
    }
}

void linked_allocation() {
    int blocks, index, i;
    printf("\n[Linked] Enter number of blocks needed: ");
    scanf("%d", &blocks);
    if (blocks <= 0 || blocks > MAX_BLOCKS) {
        printf("[Linked] Invalid block count.\n");
        return;
    }
    int file[blocks];
    printf("[Linked] Enter %d block indices (0 to %d):\n", blocks, MAX_BLOCKS - 1);
    for (i = 0; i < blocks; i++) {
        scanf("%d", &index);
        if (index < 0 || index >= MAX_BLOCKS || memory[index] == 1) {
            printf("[Linked] Block %d is invalid or already allocated. Allocation failed.\n", index);
            return;
        }
        file[i] = index;
    }
    for (i = 0; i < blocks; i++)
        memory[file[i]] = 1;
    printf("[Linked] File allocated in blocks: ");
    for (i = 0; i < blocks; i++)
        printf("%d -> ", file[i]);
    printf("NULL\n");
}

void indexed_allocation() {
    int index, blocks, i, b;
    printf("\n[Indexed] Enter index block (0 to %d): ", MAX_BLOCKS - 1);
    scanf("%d", &index);
    if (index < 0 || index >= MAX_BLOCKS || memory[index] == 1) {
        printf("[Indexed] Invalid index block or already allocated.\n");
        return;
    }
    printf("[Indexed] Enter number of blocks to allocate: ");
    scanf("%d", &blocks);
    if (blocks <= 0 || blocks > MAX_BLOCKS - 1) {
        printf("[Indexed] Invalid block count.\n");
        return;
    }
    int file[blocks];
    printf("[Indexed] Enter %d block indices (0 to %d):\n", blocks, MAX_BLOCKS - 1);
    for (i = 0; i < blocks; i++) {
        scanf("%d", &b);
        if (b < 0 || b >= MAX_BLOCKS || memory[b] == 1) {
            printf("[Indexed] Block %d is invalid or already allocated. Allocation failed.\n", b);
            return;
        }
        file[i] = b;
    }
    memory[index] = 1;
    for (i = 0; i < blocks; i++)
        memory[file[i]] = 1;
    printf("[Indexed] File indexed at block %d with blocks: ", index);
    for (i = 0; i < blocks; i++)
        printf("%d ", file[i]);
    printf("\n");
}

int main() {
    int choice;
    reset_memory();
    while (1) {
        printf("\n--- File Allocation Simulation ---\n");
        printf("1. Contiguous Allocation\n");
        printf("2. Linked Allocation\n");
        printf("3. Indexed Allocation\n");
        printf("4. Reset Memory\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1: contiguous_allocation(); break;
            case 2: linked_allocation(); break;
            case 3: indexed_allocation(); break;
            case 4: reset_memory(); printf("Memory reset.\n"); break;
            case 5: exit(0);
            default: printf("Invalid choice.\n");
        }
    }
    return 0;
}
