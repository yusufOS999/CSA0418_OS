#include <stdio.h>
#define MAX 100
typedef struct {
    int pid, at, bt, bt_left, priority, ct, tat, wt, completed;
} Process;
void sort_by_arrival(Process p[], int n) {
    for (int i = 0; i < n-1; i++)
        for (int j = i+1; j < n; j++)
            if (p[i].at > p[j].at) {
                Process temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
}
int main() {
    Process p[MAX];
    int n, time = 0, completed = 0;
    int shortest;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        printf("\nProcess %d\n", i + 1);
        p[i].pid = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &p[i].at);
        printf("Burst Time: ");
        scanf("%d", &p[i].bt);
        printf("Priority (lower number = higher priority): ");
        scanf("%d", &p[i].priority);
        p[i].bt_left = p[i].bt;
        p[i].completed = 0;
    }
    sort_by_arrival(p, n);
    while (completed < n) {
        int idx = -1;
        int highest_priority = 9999;
        for (int i = 0; i < n; i++) {
            if (p[i].at <= time && p[i].completed == 0 && p[i].priority < highest_priority && p[i].bt_left > 0) {
                highest_priority = p[i].priority;
                idx = i;
            }
        }
        if (idx != -1) {
            p[idx].bt_left--;
            time++;
            if (p[idx].bt_left == 0) {
                p[idx].ct = time;
                p[idx].tat = p[idx].ct - p[idx].at;
                p[idx].wt = p[idx].tat - p[idx].bt;
                p[idx].completed = 1;
                completed++;
            }
        } else {
            time++;
        }
    }
    printf("\nPID\tAT\tBT\tPRI\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].priority, p[i].ct, p[i].tat, p[i].wt);
    }
    float avg_tat = 0, avg_wt = 0;
    for (int i = 0; i < n; i++) {
        avg_tat += p[i].tat;
        avg_wt += p[i].wt;
    }
    printf("\nAverage Turnaround Time = %.2f\n", avg_tat / n);
    printf("Average Waiting Time = %.2f\n", avg_wt / n);
    return 0;
}
