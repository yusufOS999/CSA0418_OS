#include <stdio.h>

#define MAX_BLOCKS 100
#define MAX_FILES 10

typedef struct {
    int start;
    int length;
    int blocks[20];
} File;

int main() {
    int disk[MAX_BLOCKS] = {0}; // 0 = free, 1 = allocated
    File files[MAX_FILES];
    int fileCount, i, j, k, isFree;

    printf("Enter number of files: ");
    scanf("%d", &fileCount);

    for (i = 0; i < fileCount; i++) {
        printf("\nEnter starting block and length for file %d: ", i + 1);
        scanf("%d %d", &files[i].start, &files[i].length);

        if (files[i].start < 0 || files[i].start + files[i].length > MAX_BLOCKS) {
            printf(" Invalid block range. Try again.\n");
            i--;
            continue;
        }

        isFree = 1;
        for (j = files[i].start; j < files[i].start + files[i].length; j++) {
            if (disk[j] == 1) {
                isFree = 0;
                break;
            }
        }

        if (isFree) {
            for (j = files[i].start, k = 0; j < files[i].start + files[i].length; j++, k++) {
                disk[j] = 1;
                files[i].blocks[k] = j;
            }
            printf(" File %d allocated from block %d to %d.\n", i + 1, files[i].start, files[i].start + files[i].length - 1);
        } else {
            printf(" Cannot allocate file %d. Blocks not free.\n", i + 1);
            i--;
        }
    }

    printf("\n\nFile\tStart\tLength\tBlocks Allocated\n");
    for (i = 0; i < fileCount; i++) {
        printf("%d\t%d\t%d\t", i + 1, files[i].start, files[i].length);
        for (j = 0; j < files[i].length; j++) {
            printf("%d ", files[i].blocks[j]);
        }
        printf("\n");
    }

    return 0;
}
